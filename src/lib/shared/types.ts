import type { SvelteComponent } from 'svelte';
import { BANNERS } from "~/lib/shared/utils";

export type SvelteComponentGeneric = typeof SvelteComponent<Record<string, unknown>>;

export type Modal<T = unknown> = {
	/** An ID is autogenerated when calling `openModal` */
	id: number;
	/**
	 * The component that is rendered.
	 * This component should be wrapped in <C.Modal> ... </C.Modal>
	 */
	component: SvelteComponentGeneric;
	/**
	 * Props passed to the component.
	 * A `close` function prop is also always given for a way to close the modal.
	 * If the modal was opened using `openModalAsync`, the value passed to `close` will be the resolved value of the promise.
	 */
	props: Record<string, unknown> & {
		close(rtn?: T): void
	};
};

export type Notification = {
	/** An ID is autogenerated when calling `notify` */
	id: number;
	opts: {
		/** Notification title */
		title: string;
		/** Notification description */
		description: string;
		/** Notification theme @default 'primary' */
		theme?: 'primary' | 'success' | 'failure';
		/** How long the notification will show for (in ms) @default 1000ms */
		duration?: number;
	},
	/** Function that dismisses the notification */
	dismiss(): void;
}

export type User = {
	id: number;
	// Only included if user is requesting his own data
	googleId?: string;
	username: string;
	roles: string[];
	playerTag: string | null;
	level: number | null;
}

export type Session = {
	id: string;
	userId: number;
	expiresAt: Date;
}

export type TownHall = {
	level: number;
	maxBarracks: number;
	maxDarkBarracks: number | null;
	maxLaboratory: number | null;
	maxSpellFactory: number | null;
	maxDarkSpellFactory: number | null;
	maxWorkshop: number | null;
	maxCc: number | null;
	troopCapacity: number;
	spellCapacity: number;
	siegeCapacity: number;
	ccLaboratoryCap: number;
	ccTroopCapacity: number;
	ccSpellCapacity: number;
	ccSiegeCapacity: number;
};

export type UnitType = 'Troop' | 'Siege' | 'Spell';

export type UnitLevel = {
	id: number;
	unitId: number;
	level: number;
	spellFactoryLevel: number | null;
	barrackLevel: number | null;
	laboratoryLevel: number | null;
}

export type Unit = {
	/** ID of the unit in the `units` table */
	id: number;
	type: UnitType;
	name: string;
	objectId: number;
	housingSpace: number;
	trainingTime: number;
	productionBuilding: string;
	isSuper: boolean;
	isFlying: boolean;
	isJumper: boolean;
	airTargets: boolean;
	groundTargets: boolean;
	levels: UnitLevel[];
}

/**
 * An army unit with complete data.
 */
export type ArmyUnit = Unit & {
	/** ID of the unit in the `army_units` table */
	id: number;
	home: 'armyCamp' | 'clanCastle';
	armyId: number;
	/** ID of the unit in the `units` table */
	unitId: number;
	amount: number;
	levels: never;
};

/**
 * A complete saved army
 */
export type Army = {
	id: number;
	name: string;
	townHall: number;
	banner: Banner;
	units: ArmyUnit[];
	username: string;
	createdBy: number;
	createdTime: string;
	updatedTime: string;
	votes: number;
	userVote?: number;
};

export type Totals = {
	troops: number;
	sieges: number;
	spells: number;
	time: number;
};

type UserUtils = {
	/**
	 * Returns true if user has every role specified.
	 */
	hasRoles: (...roles: string[]) => boolean;
}

export type AppState = {
	// Frequently used data (cache)
	units: Unit[];
	townHalls: TownHall[];
	user: (User & UserUtils) | null;
	// Modals
	modals: Modal[];
	openModal<T = unknown>(component: Modal['component'], props?: Record<string, unknown>, onClose?: (rtnValue?: T) => void): void;
	openModalAsync<T = unknown>(component: Modal['component'], props?: Record<string, unknown>): Promise<T | undefined>;
	// Notifications
	notifications: Notification[];
	notify(opts: Notification['opts']): void;
	// Confirm
	confirm(confirmText: string): Promise<boolean>;
};

export type Banner = typeof BANNERS[number];

export type FetchErrors = Record<string | number | symbol, string[] | undefined> | string;
