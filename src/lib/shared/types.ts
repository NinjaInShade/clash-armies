import type { Component, ComponentProps } from 'svelte';
import type { HTTPApi } from '$shared/http';
import { BANNERS, VALID_UNIT_HOME, VALID_HEROES } from '$shared/utils';

export type Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;

export type ModalAddons = {
	close(rtn?: unknown): void;
};
export type Modal<C extends Component<any> = Component<any>> = {
	/** An ID is autogenerated when calling `openModal` */
	id: number;
	/**
	 * The component that is rendered.
	 * This component should be wrapped in <C.Modal> ... </C.Modal>
	 */
	component: C;
	/**
	 * Props passed to the component.
	 * A `close` function prop is also always given for a way to close the modal.
	 * If the modal was opened using `openModalAsync`, the value passed to `close` will be the resolved value of the promise.
	 */
	props: ComponentProps<C> & ModalAddons;
};

export type ToastNotification = {
	/** An ID is autogenerated when calling `notify` */
	id: number;
	opts: {
		/** Notification title */
		title: string;
		/** Notification description */
		description: string;
		/** Notification theme @default 'primary' */
		theme?: 'primary' | 'success' | 'failure';
		/** How long the notification will show for (in ms) @default 1000ms */
		duration?: number;
	};
	/** Function that dismisses the notification */
	dismiss(): void;
};

export type ArmyNotification = {
	/** The ID of this notification in the database */
	id: number;
	/** When this notification was issued */
	timestamp: Date;
	/** The type of this notification */
	type: 'comment' | 'comment-reply';
	/** Whether this notification has been acknowledged */
	seen: boolean;
	/** Which army this notification corresponds to */
	armyId: number;
	armyName: string;
	/** The user to which this notification should go to - this is typically the army's creator */
	recipientId: number;
	recipientName: string;
	/** Info about who triggered this notification - could be the person who commented on the army */
	triggeringUserId: number | null;
	triggeringUserName: string | null;
	/** The ID of the comment this notification is relevant too */
	commentId: number | null;
};

export type User = {
	id: number;
	// Only included if user is requesting his own data
	googleId?: string;
	username: string;
	roles: string[];
	playerTag: string | null;
	level: number | null;
};

export type Session = {
	id: string;
	userId: number;
	expiresAt: Date;
};

export type TownHall = {
	level: number;
	maxBarracks: number;
	maxDarkBarracks: number | null;
	maxLaboratory: number | null;
	maxSpellFactory: number | null;
	maxDarkSpellFactory: number | null;
	maxWorkshop: number | null;
	maxCc: number | null;
	maxBlacksmith: number | null;
	maxPetHouse: number | null;
	maxBarbarianKing: number | null;
	maxArcherQueen: number | null;
	maxGrandWarden: number | null;
	maxRoyalChampion: number | null;
	maxMinionPrince: number | null;
	troopCapacity: number;
	spellCapacity: number;
	siegeCapacity: number;
	ccLaboratoryCap: number;
	ccTroopCapacity: number;
	ccSpellCapacity: number;
	ccSiegeCapacity: number;
};

export type UnitType = 'Troop' | 'Siege' | 'Spell';
export type UnitHome = (typeof VALID_UNIT_HOME)[number];
export type HeroType = (typeof VALID_HEROES)[number];

export type BlackSmithLevel = {
	id: number;
	level: number;
	maxCommon: number;
	maxEpic: number;
};
export type UnitLevel = {
	id: number;
	unitId: number;
	level: number;
	spellFactoryLevel: number | null;
	barrackLevel: number | null;
	laboratoryLevel: number | null;
};
export type EquipmentLevel = {
	equipmentId: number;
	level: number;
	blacksmithLevel: number | null;
};
export type PetLevel = {
	id: number;
	petId: number;
	level: number;
	petHouseLevel: number | null;
};

export type Unit = {
	/** ID of the unit in the `units` table */
	id: number;
	type: UnitType;
	name: string;
	clashId: number;
	housingSpace: number;
	productionBuilding: string;
	isSuper: boolean;
	isFlying: boolean;
	isJumper: boolean;
	airTargets: boolean;
	groundTargets: boolean;
	levels: UnitLevel[];
};
export type Equipment = {
	/** ID of the hero equipment in the `equipment` table */
	id: number;
	/** Which hero this equipment can be applied to */
	hero: HeroType;
	name: string;
	clashId: number;
	epic: boolean;
	levels: EquipmentLevel[];
};
export type Pet = {
	/** ID of the pet in the `pets` table */
	id: number;
	name: string;
	clashId: number;
	levels: PetLevel[];
};
export type Guide = {
	/** ID of the guide in the `army_guides` table */
	id: number;
	armyId: number;
	textContent: string | null;
	youtubeUrl: string | null;
	createdTime: Date;
	updatedTime: Date;
};

export type ArmyCtx = {
	units: Unit[];
	townHalls: TownHall[];
	equipment: Equipment[];
	pets: Pet[];
};

type UserUtils = {
	/**
	 * Returns true if user has every role specified.
	 */
	hasRoles: (...roles: string[]) => boolean;
	notifications: ArmyNotification[];
};

export type AppState = {
	http: HTTPApi;
	// Frequently used data (cache)
	units: Unit[];
	townHalls: TownHall[];
	equipment: Equipment[];
	pets: Pet[];
	user: (User & UserUtils) | null;
	// Modals
	modals: Modal[];
	openModal<T = unknown, C extends Component<any> = Component<any>>(
		component: C,
		props?: Omit<ComponentProps<C>, keyof ModalAddons>,
		onClose?: (rtnValue?: T) => void
	): void;
	openModalAsync<T = unknown, C extends Component<any> = Component<any>>(
		component: C,
		props?: Omit<ComponentProps<C>, keyof ModalAddons>
	): Promise<T | undefined>;
	// Notifications
	notifications: ToastNotification[];
	notify(opts: ToastNotification['opts']): void;
	// Confirm
	confirm(confirmText: string): Promise<boolean>;
};

export type Banner = (typeof BANNERS)[number];
